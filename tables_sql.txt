-- ==========================================
-- 创建公共模式下的表
适用于 Supabase  
RLS开启、RLS策略、默认权限、全文搜素4项未执行！！！
2025/6/9

需要重新整理，特别是 评分
-- ==========================================
--网站广告语表
CREATE TABLE web_title (
    id bigint primary key generated always as identity,
    main_title text NOT NULL,  --主标题
    sub_title text NOT NULL    --副标题
)；



-- 用户表 (与 auth.users 关联)
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    user_id UUID UNIQUE REFERENCES auth.users(id) ON DELETE CASCADE, -- Supabase 认证用户关联
    username TEXT UNIQUE NOT NULL,
    points INT DEFAULT 0,
    avatar_url VARCHAR(255),
    bio TEXT,
    role TEXT DEFAULT 'user' CHECK (role IN ('user', 'admin', 'moderator')),
    status TEXT DEFAULT 'active' CHECK (status IN ('active', 'inactive', 'banned'))
);

COMMENT ON TABLE users IS '用户表';
COMMENT ON COLUMN users.id IS '用户ID序号';
COMMENT ON COLUMN users.user_id IS 'Supabase 用户ID';
COMMENT ON COLUMN users.username IS '用户名';
COMMENT ON COLUMN users.points IS '积分';
COMMENT ON COLUMN users.avatar_url IS '头像URL';
COMMENT ON COLUMN users.bio IS '个人简介';
COMMENT ON COLUMN users.role IS '用户角色';
COMMENT ON COLUMN users.status IS '账户状态';

-- 自动创建公共用户记录触发器函数
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.users (user_id, username)
  VALUES (NEW.id, NEW.email);-- 这里先用邮箱作为用户名，后续用户可以自己修改
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 用户认证同步触发器
CREATE TRIGGER on_auth_prompt_user_created
AFTER INSERT ON auth.users
FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- 用户表策略
CREATE POLICY "用户管理自己的数据" ON users
FOR ALL USING (user_id = auth.uid());

CREATE POLICY "管理员管理所有用户数据" ON users
FOR ALL USING (
    EXISTS (SELECT 1 FROM users 
            WHERE user_id = auth.uid() AND role = 'admin')
);

-- 用户表索引
CREATE INDEX idx_users_username ON users (username);
CREATE INDEX idx_users_uid ON users (user_id);

-- 提示词分类表
CREATE TABLE categories (
    category_id BIGSERIAL PRIMARY KEY,  --分类id
    name VARCHAR(100) NOT NULL,
    slug VARCHAR(100) NOT NULL UNIQUE,
    description TEXT,
    icon VARCHAR(100),
    color VARCHAR(50),
    sort_order INT DEFAULT 0,
    is_active BOOLEAN DEFAULT TRUE,
    created_by UUID REFERENCES auth.users(id) ON DELETE SET NULL,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);
-- 分类表索引
CREATE INDEX idx_categories_slug ON categories (slug);
CREATE INDEX idx_categories_sort_order ON categories (sort_order);
CREATE INDEX idx_categories_is_active ON categories (is_active);


-- 提示词表 (与用户关联)
CREATE TABLE prompts (
    prompt_id BIGSERIAL PRIMARY KEY,
    title VARCHAR(200) NOT NULL,

    description TEXT,
    content TEXT NOT NULL,
    category_id BIGINT NOT NULL REFERENCES categories(category_id) ON DELETE RESTRICT,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE, -- 创建者ID
    view_count INT DEFAULT 0,
    use_count INT DEFAULT 0,
    like_count INT DEFAULT 0,
    favorite_count INT DEFAULT 0,
    rating_average DECIMAL(3,2) DEFAULT 0.00,
    rating_count INT DEFAULT 0,
    status TEXT DEFAULT 'draft' CHECK (status IN ('draft', 'published', 'reviewing', 'rejected')),
    is_featured BOOLEAN DEFAULT FALSE,
    is_public BOOLEAN DEFAULT TRUE,
    published_at TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

ALTER TABLE prompts ADD COLUMN  category_name TEXT NOT NULL;
ALTER TABLE prompts ADD COLUMN  tags TEXT[] DEFAULT '{}'::TEXT[];
ALTER TABLE prompts ADD COLUMN  search_vector TSVECTOR;

--增加提示词的参考输出
ALTER TABLE prompts ADD COLUMN  model_name  TEXT; --使用模型
ALTER TABLE prompts ADD COLUMN  output_text TEXT; --文本输出内容
ALTER TABLE prompts ADD COLUMN  output_media TEXT; --多媒体文件在Supabase Storage中的存储路径（图片/视频/音频）

--增加原作者字段
ALTER TABLE prompts ADD COLUMN  orig_auth TEXT; --原作者

-- 提示词表索引

CREATE INDEX idx_prompts_category_id ON prompts (category_id);
CREATE INDEX idx_prompts_status ON prompts (status);
CREATE INDEX idx_prompts_is_featured ON prompts (is_featured);
CREATE INDEX idx_prompts_published_at ON prompts (published_at);
CREATE INDEX idx_prompts_view_count ON prompts (view_count);
CREATE INDEX idx_prompts_use_count ON prompts (use_count);
CREATE INDEX idx_prompts_rating_average ON prompts (rating_average);
CREATE INDEX idx_prompts_user_id ON prompts (user_id);
CREATE INDEX idx_prompts_category_name ON prompts(category_name);
CREATE INDEX idx_prompts_tags ON prompts USING GIN(tags);
CREATE INDEX idx_prompts_search ON prompts USING GIN(search_vector);

-- 自动更新分类名称和搜索向量
CREATE OR REPLACE FUNCTION update_prompt_derived_fields()
RETURNS TRIGGER AS $$
BEGIN
  -- 更新分类名称
  IF TG_OP = 'INSERT' OR NEW.category_id IS DISTINCT FROM OLD.category_id THEN
    NEW.category_name = (SELECT name FROM categories WHERE id = NEW.category_id);
  END IF;
  
  -- 更新全文搜索向量（带权重）
  NEW.search_vector = 
    SETWEIGHT(TO_TSVECTOR('english', COALESCE(NEW.title, '')), 'A') ||
    SETWEIGHT(TO_TSVECTOR('english', COALESCE(NEW.category_name, '')), 'B') ||
    SETWEIGHT(TO_TSVECTOR('english', COALESCE(NEW.content, '')), 'C') ||
    SETWEIGHT(TO_TSVECTOR('english', COALESCE(ARRAY_TO_STRING(NEW.tags, ' '), '')), 'B');
    
  -- 更新时间戳
  NEW.updated_at = NOW();
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 创建触发器
CREATE TRIGGER tr_prompt_derived_fields
BEFORE INSERT OR UPDATE ON prompts
FOR EACH ROW EXECUTE FUNCTION update_prompt_derived_fields();


-- 用户收藏表-- 存储用户收藏的提示词
CREATE TABLE user_favorites (
    favorite_id BIGSERIAL PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    prompt_id BIGINT NOT NULL REFERENCES prompts(prompt_id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (user_id, prompt_id)
);

-- 用户点赞表-- 存储用户点赞记录
CREATE TABLE user_likes (
    like_id BIGSERIAL PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    prompt_id BIGINT NOT NULL REFERENCES prompts(prompt_id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (user_id, prompt_id)
);

-- 用户评分表-- 存储用户对提示词的评分
CREATE TABLE user_ratings (
    rating_id BIGSERIAL PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    prompt_id BIGINT NOT NULL REFERENCES prompts(prompt_id) ON DELETE CASCADE,
    rating INT NOT NULL CHECK (rating BETWEEN 1 AND 5),
    review TEXT,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (user_id, prompt_id)
);

-- 使用记录表-- 记录提示词使用情况
CREATE TABLE usage_logs (
    log_id BIGSERIAL PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,
    prompt_id BIGINT NOT NULL REFERENCES prompts(prompt_id) ON DELETE CASCADE,
    ip_address VARCHAR(45),
    user_agent TEXT,
    action_type TEXT NOT NULL CHECK (action_type IN ('view', 'copy', 'use')),
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- 评论表-- 存储用户评论
CREATE TABLE comments (
    comment_id BIGSERIAL PRIMARY KEY,
    prompt_id BIGINT NOT NULL REFERENCES prompts(prompt_id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    parent_id BIGINT REFERENCES comments(comment_id) ON DELETE CASCADE,--父评论ID(用于回复)
    content TEXT NOT NULL,
    like_count INT DEFAULT 0,
    status TEXT DEFAULT 'published' CHECK (status IN ('published', 'hidden', 'pending')),
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- 系统配置表-- 存储网站配置信息
CREATE TABLE system_configs (
    config_id BIGSERIAL PRIMARY KEY,
    config_key VARCHAR(100) NOT NULL UNIQUE,
    config_value TEXT,
    config_type VARCHAR(50) DEFAULT 'string',
    description TEXT,
    is_public BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- ==========================================
-- 创建索引
-- ==========================================

-- 标签表索引
CREATE INDEX idx_tags_name ON tags (name);
CREATE INDEX idx_tags_slug ON tags (slug);
CREATE INDEX idx_tags_use_count ON tags (use_count);

-- 提示词标签关联表索引
CREATE INDEX idx_prompt_tags_prompt_id ON prompt_tags (prompt_id);
CREATE INDEX idx_prompt_tags_tag_id ON prompt_tags (tag_id);

-- 用户收藏表索引
CREATE INDEX idx_user_favorites_user_id ON user_favorites (user_id);
CREATE INDEX idx_user_favorites_prompt_id ON user_favorites (prompt_id);
CREATE INDEX idx_user_favorites_created_at ON user_favorites (created_at);

-- 用户点赞表索引
CREATE INDEX idx_user_likes_user_id ON user_likes (user_id);
CREATE INDEX idx_user_likes_prompt_id ON user_likes (prompt_id);

-- 用户评分表索引
CREATE INDEX idx_user_ratings_user_id ON user_ratings (user_id);
CREATE INDEX idx_user_ratings_prompt_id ON user_ratings (prompt_id);
CREATE INDEX idx_user_ratings_rating ON user_ratings (rating);

-- 使用记录表索引
CREATE INDEX idx_usage_logs_user_id ON usage_logs (user_id);
CREATE INDEX idx_usage_logs_prompt_id ON usage_logs (prompt_id);
CREATE INDEX idx_usage_logs_action_type ON usage_logs (action_type);
CREATE INDEX idx_usage_logs_created_at ON usage_logs (created_at);

-- 评论表索引
CREATE INDEX idx_comments_prompt_id ON comments (prompt_id);
CREATE INDEX idx_comments_user_id ON comments (user_id);
CREATE INDEX idx_comments_parent_id ON comments (parent_id);
CREATE INDEX idx_comments_status ON comments (status);
CREATE INDEX idx_comments_created_at ON comments (created_at);

-- 系统配置表索引
CREATE INDEX idx_system_configs_config_key ON system_configs (config_key);
CREATE INDEX idx_system_configs_is_public ON system_configs (is_public);


-- ==========================================
-- 创建视图
-- ==========================================
CREATE OR REPLACE VIEW hot_prompts AS
SELECT
    p.prompt_id,
    p.title,
    p.description,
    p.content,
    p.category_id,
    p.user_id,
    p.view_count,
    p.use_count,
    p.like_count,
    p.favorite_count,
    p.rating_average,
    p.rating_count,
    p.status,
    p.is_featured,
    p.is_public,
    p.published_at,
    p.created_at,
    p.updated_at,
    p.tags,
    p.output_media,
    p.orig_auth,
    p.author_name,
    p.author_avatar,
    p.category_name,
    c.name as category_name_join,
    u.username as author_name_join,
    COALESCE(p.use_count * 0.4 + p.view_count * 0.3 + p.like_count * 0.2 + p.favorite_count * 0.1, 0) as hot_score
FROM prompts p
LEFT JOIN categories c ON p.category_id = c.category_id
LEFT JOIN users u ON p.user_id = u.user_id
WHERE p.status = 'published' AND p.is_public = TRUE
ORDER BY hot_score DESC;

CREATE OR REPLACE VIEW user_stats AS
SELECT 
    u.user_id,
    u.username,
    COUNT(DISTINCT p.prompt_id) as prompts_count,
    COALESCE(SUM(p.view_count), 0) as total_views,
    COALESCE(SUM(p.use_count), 0) as total_uses,
    COALESCE(SUM(p.like_count), 0) as total_likes
FROM users u
LEFT JOIN prompts p ON u.user_id = p.user_id AND p.status = 'published'
GROUP BY u.user_id,u.username;

-- ==========================================
-- 创建触发器函数
-- ==========================================
-- 通用更新时间触发器函数
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


-- 提示词统计更新函数
CREATE OR REPLACE FUNCTION public.update_prompt_stats()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        CASE TG_TABLE_NAME
            WHEN 'user_favorites' THEN
                UPDATE prompts SET favorite_count = favorite_count + 1 WHERE prompt_id = NEW.prompt_id;
            WHEN 'user_likes' THEN
                UPDATE prompts SET like_count = like_count + 1 WHERE prompt_id = NEW.prompt_id;
        END CASE;
    ELSIF TG_OP = 'DELETE' THEN
        CASE TG_TABLE_NAME
            WHEN 'user_favorites' THEN
                UPDATE prompts SET favorite_count = GREATEST(favorite_count - 1, 0) WHERE prompt_id = OLD.prompt_id;
            WHEN 'user_likes' THEN
                UPDATE prompts SET like_count = GREATEST(like_count - 1, 0) WHERE prompt_id = OLD.prompt_id;
        END CASE;
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

-- 提示词评分更新函数
CREATE OR REPLACE FUNCTION public.update_prompt_rating()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE prompts p
    SET 
        rating_average = COALESCE((
            SELECT AVG(rating) 
            FROM user_ratings 
            WHERE prompt_id = COALESCE(NEW.prompt_id, OLD.prompt_id)
        ), 0.00),
        rating_count = (
            SELECT COUNT(*) 
            FROM user_ratings 
            WHERE prompt_id = COALESCE(NEW.prompt_id, OLD.prompt_id)
        )
    WHERE p.prompt_id = COALESCE(NEW.prompt_id, OLD.prompt_id);
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

-- ==========================================
-- 创建触发器
-- ==========================================

-- 通用更新时间触发器
DO $$ 
DECLARE
    tbl text;
BEGIN
    FOR tbl IN 
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public'
        AND table_name IN ('users','categories', 'prompts', 'user_ratings', 'comments', 'system_configs')
    LOOP
        EXECUTE format('CREATE TRIGGER update_%s_updated_at
            BEFORE UPDATE ON %I
            FOR EACH ROW EXECUTE FUNCTION update_updated_at_column()',
            tbl, tbl);
    END LOOP;
END 
$$;

-- 收藏和点赞统计触发器
CREATE TRIGGER after_favorite_insert
AFTER INSERT ON user_favorites
FOR EACH ROW EXECUTE FUNCTION public.update_prompt_stats();

CREATE TRIGGER after_favorite_delete
AFTER DELETE ON user_favorites
FOR EACH ROW EXECUTE FUNCTION public.update_prompt_stats();

CREATE TRIGGER after_like_insert
AFTER INSERT ON user_likes
FOR EACH ROW EXECUTE FUNCTION public.update_prompt_stats();

CREATE TRIGGER after_like_delete
AFTER DELETE ON user_likes
FOR EACH ROW EXECUTE FUNCTION public.update_prompt_stats();

-- 评分统计触发器
CREATE TRIGGER after_rating_insert
AFTER INSERT ON user_ratings
FOR EACH ROW EXECUTE FUNCTION public.update_prompt_rating();

CREATE TRIGGER after_rating_update
AFTER UPDATE ON user_ratings
FOR EACH ROW EXECUTE FUNCTION public.update_prompt_rating();

CREATE TRIGGER after_rating_delete
AFTER DELETE ON user_ratings
FOR EACH ROW EXECUTE FUNCTION public.update_prompt_rating();


-- -------------以下RLS和策略未开启，减少调试难度---------
-- ==========================================
-- 启用行级安全(RLS)，未执行！未执行！
-- ==========================================
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE prompts ENABLE ROW LEVEL SECURITY;
ALTER TABLE tags ENABLE ROW LEVEL SECURITY;
ALTER TABLE prompt_tags ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_favorites ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_likes ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_ratings ENABLE ROW LEVEL SECURITY;
ALTER TABLE usage_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE comments ENABLE ROW LEVEL SECURITY;
ALTER TABLE system_configs ENABLE ROW LEVEL SECURITY;

-- ==========================================
-- 创建RLS策略，未执行！未执行！
-- ==========================================


-- 提示词表策略
CREATE POLICY "用户管理自己的提示词" ON prompts
FOR ALL USING (user_id = auth.uid());

CREATE POLICY "查看公开提示词" ON prompts
FOR SELECT USING (status = 'published' AND is_public = TRUE);

CREATE POLICY "管理员管理所有提示词" ON prompts
FOR ALL USING (
    EXISTS (SELECT 1 FROM users 
            WHERE uid = auth.uid() AND role = 'admin')
);

-- 分类表策略
CREATE POLICY "查看公开分类" ON categories
FOR SELECT USING (is_active = TRUE);

CREATE POLICY "管理员管理所有分类" ON categories
FOR ALL USING (
    EXISTS (SELECT 1 FROM users 
            WHERE uid = auth.uid() AND role = 'admin')
);

-- 标签表策略
CREATE POLICY "查看所有标签" ON tags
FOR SELECT USING (TRUE);

CREATE POLICY "管理员管理所有标签" ON tags
FOR ALL USING (
    EXISTS (SELECT 1 FROM users 
            WHERE uid = auth.uid() AND role = 'admin')
);

-- 用户收藏表策略
CREATE POLICY "用户管理自己的收藏" ON user_favorites
FOR ALL USING (user_id = auth.uid());

-- 用户点赞表策略
CREATE POLICY "用户管理自己的点赞" ON user_likes
FOR ALL USING (user_id = auth.uid());

-- 用户评分表策略
CREATE POLICY "用户管理自己的评分" ON user_ratings
FOR ALL USING (user_id = auth.uid());

-- 评论表策略
CREATE POLICY "用户管理自己的评论" ON comments
FOR ALL USING (user_id = auth.uid());

CREATE POLICY "查看公开评论" ON comments
FOR SELECT USING (status = 'published');

-- 使用记录表策略
CREATE POLICY "用户查看自己的使用记录" ON usage_logs
FOR SELECT USING (user_id = auth.uid());

-- 系统配置表策略
CREATE POLICY "查看公开配置" ON system_configs
FOR SELECT USING (is_public = TRUE);

CREATE POLICY "管理员管理所有配置" ON system_configs
FOR ALL USING (
    EXISTS (SELECT 1 FROM users 
            WHERE uid = auth.uid() AND role = 'admin')
);





-- ==========================================
-- 初始化数据
-- ==========================================
-- 创建管理员用户（通过触发器自动关联）
-- 用前端界面注册登录！！
//INSERT INTO auth.users (id, email, created_at) 
//VALUES (gen_random_uuid(), 'admin@example.com', NOW());

-- 初始化分类
INSERT INTO categories (name, slug, description, icon, color, sort_order) VALUES
('写作助手', 'writing', '文章、博客、创意写作相关提示词', 'fas fa-pen-fancy', '#f093fb', 1),
('编程开发', 'programming', '代码生成、调试、优化相关提示词', 'fas fa-code', '#4facfe', 2),
('营销推广', 'marketing', '文案、广告、社媒内容相关提示词', 'fas fa-bullhorn', '#fa709a', 3),
('学习教育', 'education', '解题、总结、学习计划相关提示词', 'fas fa-graduation-cap', '#43e97b', 4),
('商业分析', 'business', '市场分析、商业策略相关提示词', 'fas fa-chart-line', '#764ba2', 5),
('创意设计', 'design', '设计灵感、创意思路相关提示词', 'fas fa-palette', '#ff6b6b', 6);

INSERT INTO categories (name, slug, description, icon, color, sort_order) VALUES
('文生图像', 'imaging', '文字生成图像相关提示词', 'fas fa-pen-image', '#f093fb', 7);




-- 更新管理员用户记录（通过触发器创建后更新角色）
UPDATE public.users 
SET role = 'admin', username = '管理员'
WHERE  username = 'chtx365@163.com';

-- 初始化提示词（由管理员创建）
INSERT INTO prompts (title, description, content, category_id, user_id, status, is_featured, published_at)
SELECT 
    '专业文章写作助手',
    '帮助您创作结构清晰、逻辑严密的专业文章，支持多种文体和风格调整',
    '你是一位专业的写作助手，请帮我写一篇关于[主题]的文章。要求：
1. 文章结构清晰，包含引言、主体和结论
2. 逻辑严密，论点明确
3. 语言专业且易懂
4. 字数控制在[字数]字左右
5. 适合[目标读者]阅读', 
    1, 
    u.user_id, 
   'published', 
    TRUE, 
    NOW()
FROM public.users u WHERE u.username= '管理员';

INSERT INTO prompts (title, description, content, category_id, user_id, status, is_featured, published_at)
SELECT
    '代码优化专家',
    '分析您的代码并提供优化建议，包括性能提升、可读性改进和最佳实践',
    '你是一位资深的代码优化专家，请帮我分析以下代码并提供优化建议：
[代码内容]
请从以下方面进行分析：
1. 性能优化
2. 代码可读性
3. 最佳实践
4. 潜在bug
5. 重构建议', 
    2, 
    u.user_id, 
   'published', 
    TRUE, 
    NOW()
FROM public.users u WHERE u.username = '管理员';

INSERT INTO prompts (title, slug, description, content, category_id, user_id, status, is_featured, published_at) 
SELECT 
    '社交媒体文案大师', 
    'social-media-copywriter', 
    '创作吸引人的社交媒体内容，提高互动率和转化率，适合各大平台', 
    '你是一位经验丰富的社交媒体文案专家，请为[品牌/产品]创作一系列社交媒体内容：
目标平台：[平台名称]
目标受众：[受众描述]
营销目标：[具体目标]
请创作：
1. 吸引眼球的标题
2. 引人入胜的正文
3. 相关话题标签
4. 行动号召语句', 
    3, 
    u.user_id, 
   'published', 
    TRUE, 
    NOW()
FROM public.users u WHERE u.username = '管理员';

-- 初始化标签
INSERT INTO tags (name, slug, description, color) VALUES
('写作', 'writing', '文章写作相关', '#3b82f6'),
('代码', 'coding', '编程代码相关', '#10b981'),
('营销', 'marketing', '营销推广相关', '#f59e0b'),
('教育', 'education', '学习教育相关', '#8b5cf6'),
('AI', 'ai', '人工智能相关', '#ef4444'),
('创意', 'creative', '创意设计相关', '#06b6d4');

-- 初始化提示词标签关联
INSERT INTO prompt_tags (prompt_id, tag_id) 
SELECT p.prompt_id, t.tag_id 
FROM prompts p, tags t 
WHERE p.slug = 'professional-writing-assistant' 
AND t.slug IN ('writing', 'ai');

INSERT INTO prompt_tags (prompt_id, tag_id) 
SELECT p.prompt_id, t.tag_id 
FROM prompts p, tags t 
WHERE p.slug = 'code-optimization-expert' 
AND t.slug IN ('coding', 'ai');

INSERT INTO prompt_tags (prompt_id, tag_id) 
SELECT p.prompt_id, t.tag_id 
FROM prompts p, tags t 
WHERE p.slug = 'social-media-copywriter' 
AND t.slug IN ('marketing', 'ai');

-- 初始化系统配置
INSERT INTO system_configs (config_key, config_value, config_type, description, is_public) VALUES
('site_name', 'AI提示词宝库', 'string', '网站名称', TRUE),
('site_description', '发现最佳AI提示词，让您的AI更智能、更高效', 'string', '网站描述', TRUE),
('prompts_per_page', '12', 'integer', '每页显示提示词数量', FALSE),
('allow_user_submit', 'true', 'boolean', '是否允许用户提交提示词', FALSE),
('require_email_verification', 'true', 'boolean', '是否需要邮箱验证', FALSE);

-- ==========================================
-- 设置默认权限 ,此项未执行！未执行！！
-- ==========================================
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO authenticated;

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public
GRANT USAGE, SELECT ON SEQUENCES TO authenticated;

-- ==========================================
-- 创建全文搜索索引，未执行！未执行！
-- ==========================================
ALTER TABLE prompts ADD COLUMN search_vector TSVECTOR;
ALTER TABLE tags ADD COLUMN search_vector TSVECTOR;

CREATE OR REPLACE FUNCTION prompts_search_vector_update() 
RETURNS TRIGGER AS $$
BEGIN
    NEW.search_vector = 
        setweight(to_tsvector('english', COALESCE(NEW.title, '')), 'A') ||
        setweight(to_tsvector('english', COALESCE(NEW.description, '')), 'B') ||
        setweight(to_tsvector('english', COALESCE(NEW.content, '')), 'C');
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER tsvector_update_prompts BEFORE INSERT OR UPDATE
ON prompts FOR EACH ROW EXECUTE FUNCTION prompts_search_vector_update();

CREATE OR REPLACE FUNCTION tags_search_vector_update() 
RETURNS TRIGGER AS $$
BEGIN
    NEW.search_vector = 
        setweight(to_tsvector('english', COALESCE(NEW.name, '')), 'A') ||
        setweight(to_tsvector('english', COALESCE(NEW.description, '')), 'B');
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER tsvector_update_tags BEFORE INSERT OR UPDATE
ON tags FOR EACH ROW EXECUTE FUNCTION tags_search_vector_update();

-- 初始化搜索向量
UPDATE prompts SET search_vector = 
    setweight(to_tsvector('english', COALESCE(title, '')), 'A') ||
    setweight(to_tsvector('english', COALESCE(description, '')), 'B') ||
    setweight(to_tsvector('english', COALESCE(content, '')), 'C');

UPDATE tags SET search_vector = 
    setweight(to_tsvector('english', COALESCE(name, '')), 'A') ||
    setweight(to_tsvector('english', COALESCE(description, '')), 'B');

-- 创建搜索索引
CREATE INDEX idx_prompts_search ON prompts USING GIN (search_vector);
CREATE INDEX idx_tags_search ON tags USING GIN (search_vector);

-- ==========================================
-- 创建计数器更新函数
-- ==========================================

-- 增加使用计数函数
CREATE OR REPLACE FUNCTION increment_use_count(prompt_id BIGINT)
RETURNS void AS $$
BEGIN
    UPDATE prompts
    SET use_count = use_count + 1
    WHERE prompts.prompt_id = increment_use_count.prompt_id;
END;
$$ LANGUAGE plpgsql;

-- 增加浏览计数函数
CREATE OR REPLACE FUNCTION increment_view_count(prompt_id BIGINT)
RETURNS void AS $$
BEGIN
    UPDATE prompts
    SET view_count = view_count + 1
    WHERE prompts.prompt_id = increment_view_count.prompt_id;
END;
$$ LANGUAGE plpgsql;

-- 提示：运行此脚本后，您的数据库将完全配置完成
-- 建议先创建一个管理员账户，然后运行 demo_data.sql 插入演示数据